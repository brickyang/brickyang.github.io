<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码小白之路</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://brickyang.github.io/"/>
  <updated>2017-03-02T10:53:04.000Z</updated>
  <id>http://brickyang.github.io/</id>
  
  <author>
    <name>Brick Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 自动定时备份 MongoDB</title>
    <link href="http://brickyang.github.io/2017/03/02/Linux-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD-MongoDB/"/>
    <id>http://brickyang.github.io/2017/03/02/Linux-自动备份-MongoDB/</id>
    <published>2017-03-02T10:01:52.000Z</published>
    <updated>2017-03-02T10:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍在 Linux 系统下，使用 <code>mongodump</code> 命令自动定时备份数据库的方法。</p>
<h2 id="mongodump"><a href="#mongodump" class="headerlink" title="mongodump"></a>mongodump</h2><p><code>mongodump</code> 是 MongoDB 提供的一个工具，用于备份数据库，配合使用 <code>mongorestore</code> 恢复工具使用。这套工具适合小型应用或开发环境。</p>
<p>运行 <code>mongodump</code> 和 <code>mongorestore</code> 时需要读取正在运行的数据库实例，因此会影响数据库性能。一方面是运行时需要占用系统资源，另一方面，运行这两个命令时数据库会强制通过内存读取所有数据，可能导致读取的不常用数据覆盖常用数据，从而影响数据库日常运行的性能。</p>
<p><em>2.2及以上版本的 <code>mongodump</code> 数据格式与低版本<strong>不兼容</strong>，因此请勿使用高版本工具备份低版本数据。</em></p>
<p><code>mongodump</code> 不会备份 <code>local</code> 数据库。</p>
<p>直接运行 <code>mongodump</code> 命令，默认备份本地运行在27017端口下的 MongoDB 实例中的所有数据库（<code>local</code> 除外），并在当前目录下生成 <code>dump/</code> 路径存放备份文件。</p>
<p>你也可以使用以下命令指定备份的数据库位置、端口、输出文件位置、备份数据库和文档：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">mongodump</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">mongodb</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27017</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">out</span> <span class="comment">/data/backup/</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">db</span> <span class="comment">test</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">collection</span> <span class="comment">myCollection</span></div></pre></td></tr></table></figure>
<h2 id="命令脚本"><a href="#命令脚本" class="headerlink" title="命令脚本"></a>命令脚本</h2><p>首先我们要创建一个执行备份工作的脚本。在 <code>~/crontab/</code> 下新建一个 <code>.sh</code> 文件：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">mkdir</span> -<span class="keyword">p</span> ~/crontab</div><div class="line">$ <span class="keyword">vi</span> ~/crontab/mongod_bak.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>写入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">DUMP=mongodump</div><div class="line">OUT_DIR=/data/backup/mongod/tmp   // 备份文件临时目录</div><div class="line">TAR_DIR=/data/backup/mongod       // 备份文件正式目录</div><div class="line">DATE=`date +%Y_%m_%d_%H_%M_%S`    // 备份文件将以备份时间保存</div><div class="line">DB_USER=&lt;USER&gt;                    // 数据库操作员</div><div class="line">DB_PASS=&lt;PASSWORD&gt;                // 数据库操作员密码</div><div class="line">DAYS=14                           // 保留最新14天的备份</div><div class="line">TAR_BAK=<span class="string">"mongod_bak_<span class="variable">$DATE</span>.tar.gz"</span> // 备份文件命名格式</div><div class="line"><span class="built_in">cd</span> <span class="variable">$OUT_DIR</span>                       // 创建文件夹</div><div class="line">rm -rf <span class="variable">$OUT_DIR</span>/*                 // 清空临时目录</div><div class="line">mkdir -p <span class="variable">$OUT_DIR</span>/<span class="variable">$DATE</span>           // 创建本次备份文件夹</div><div class="line"><span class="variable">$DUMP</span> -u <span class="variable">$DB_USER</span> -p <span class="variable">$DB_PASS</span> -o <span class="variable">$OUT_DIR</span>/<span class="variable">$DATE</span>  // 执行备份命令</div><div class="line">tar -zcvf <span class="variable">$TAR_DIR</span>/<span class="variable">$TAR_BAK</span> <span class="variable">$OUT_DIR</span>/<span class="variable">$DATE</span>       // 将备份文件打包放入正式目录</div><div class="line">find <span class="variable">$TAR_DIR</span>/ -mtime +<span class="variable">$DAYS</span> -delete             // 删除14天前的旧备份</div></pre></td></tr></table></figure>
<p>这个脚本完成了备份、打包、删除一定时间之前旧备份的工作。注意其中的 <code>user</code> 需要具有对希望备份的数据库具有 <code>find</code> 操作权限。</p>
<p>保存好脚本后别忘了将它设为可执行：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>chmod +x ~<span class="regexp">/crontab/mongod</span>_bak.sh</div></pre></td></tr></table></figure>
<p>现在你可以试着执行一下 <code>./mongod_bak.sh</code>，就会在备份文件夹中看到打包好的备份数据了。</p>
<h2 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h2><p>备份脚本写好之后，就需要让它自动运行。直接使用 Linux 的 <code>crontab</code> 命令即可：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi <span class="regexp">/etc/</span>crontab</div></pre></td></tr></table></figure>
<p>在底部添加：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span><span class="number">0</span> <span class="number">2</span> * * * root ~<span class="regexp">/crontab/mongod</span>_bak.sh</div></pre></td></tr></table></figure>
<p>这一行表示在每天凌晨02:00以 root 身份运行备份数据库的脚本。然后重启 crond 使其生效：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> /bin/systemctl restart  crond.service</div><div class="line"><span class="symbol">$</span> chkconfig crond on    <span class="comment">// 设为开机启动</span></div></pre></td></tr></table></figure>
<p>至此，一个自动运行的备份脚本就设置好了。以后每天凌晨02:00都会有一份新鲜的备份文件放在指定目录中，并且会自动删除14天前的旧备份。</p>
<p><strong>参考资料</strong></p>
<p><a href="https://docs.mongodb.com/manual/tutorial/backup-and-restore-tools/" target="_blank" rel="external">Back Up and Restore with MongoDB Tools</a></p>
<p><a href="https://zh.wikipedia.org/zh-hans/Cron" target="_blank" rel="external">Cron - Wikipedia</a></p>
]]></content>
    
    <summary type="html">
    
      本文介绍在 Linux 系统下，使用 mongodump 命令自动定时备份数据库的方法。
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://brickyang.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 shadowsocks 客户端</title>
    <link href="http://brickyang.github.io/2017/03/02/CentOS-7-%E5%AE%89%E8%A3%85-Shadowsocks-%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://brickyang.github.io/2017/03/02/CentOS-7-安装-Shadowsocks-客户端/</id>
    <published>2017-03-02T06:13:05.000Z</published>
    <updated>2017-03-02T06:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近由于在阿里云从 GitHub 拖代码非常困难，因此萌生了在服务器上使用 shadowsocks 的念头。</p>
<p>本文记录了我在 CentOS 7 上成功安装运行 shadowsocks 客户端的过程。</p>
<p><strong>本文的过程我已在本地 CentOS 上成功运行，尚未在阿里云实测。</strong></p>
<p><strong>给新手：</strong>这里介绍的是安装 shadowsocks <strong>客户端</strong>的过程，也就是让服务器能正常访问 GitHub 的方法。你需要已经有一个 shadowsocks 服务端。</p>
<p>一般网上找到的「CentOS 安装 shadowsocks」文章多数都是讲安装服务端的。</p>
<h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><p>Pip 是 Python 的包管理工具，这里我们用 pip 安装 shadowsocks。</p>
<p>有些文章会介绍用 <code>yum install -y pip</code> 安装，我用的是官方一个最小化的 CentOS，没有这个包，所以手动安装。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="string">"https://bootstrap.pypa.io/get-pip.py"</span> -<span class="keyword">o</span> <span class="string">"get-pip.py"</span></div><div class="line">$ <span class="keyword">python</span> <span class="built_in">get</span>-pip.<span class="keyword">py</span></div></pre></td></tr></table></figure>
<h2 id="Shadowsocks-客户端"><a href="#Shadowsocks-客户端" class="headerlink" title="Shadowsocks 客户端"></a>Shadowsocks 客户端</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></div><div class="line">$ pip <span class="keyword">install</span> shadowsocks</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>新建配置文件：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi <span class="regexp">/etc/</span>shadowsocks.json</div></pre></td></tr></table></figure>
<p>填写以下内容</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"server"</span>:<span class="string">"x.x.x.x"</span>,             <span class="meta">#你的 ss 服务器 ip</span></div><div class="line">  <span class="string">"server_port"</span>:<span class="number">0</span>,                <span class="meta">#你的 ss 服务器端口</span></div><div class="line">  <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,   <span class="meta">#本地ip</span></div><div class="line">  <span class="string">"local_port"</span>:<span class="number">0</span>,                 <span class="meta">#本地端口</span></div><div class="line">  <span class="string">"password"</span>:<span class="string">"password"</span>,          <span class="meta">#连接 ss 密码</span></div><div class="line">  <span class="string">"timeout"</span>:<span class="number">300</span>,                  <span class="meta">#等待超时</span></div><div class="line">  <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,         <span class="meta">#加密方式</span></div><div class="line">  <span class="string">"workers"</span>: <span class="number">1</span>                    <span class="meta">#工作线程数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nohup sslocal -c <span class="meta-keyword">/etc/</span>shadowsocks.json <span class="meta-keyword">/dev/</span>null <span class="number">2</span>&gt;<span class="variable">&amp;1</span> &amp;</div><div class="line">$ echo <span class="string">" nohup sslocal -c /etc/shadowsocks.json /dev/null 2&gt;&amp;1 &amp;"</span> <span class="meta-keyword">/etc/</span>rc.local   <span class="meta">#设置自启动</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行 <code>curl --socks5 127.0.0.1:1985 http://httpbin.org/ip</code>，如果返回你的 ss 服务器 ip 则测试成功：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"origin"</span>: <span class="string">"x.x.x.x"</span>       #你的 ss 服务器 ip</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Privoxy"><a href="#Privoxy" class="headerlink" title="Privoxy"></a>Privoxy</h2><p>Shadowsocks 是一个 socket5 服务，我们需要使用 Privoxy 把流量转到 http／https 上。</p>
<p>###下载安装文件</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/www.privoxy.org/sf</span>-download-mirror/Sources/<span class="number">3.0</span>.<span class="number">26</span>%<span class="number">20</span>%<span class="number">28</span>stable%<span class="number">29</span>/privoxy-<span class="number">3.0</span>.<span class="number">26</span>-stable-src.tar.gz</div><div class="line"><span class="variable">$ </span>tar -zxvf privoxy-<span class="number">3.0</span>.<span class="number">26</span>-stable-src.tar.gz</div><div class="line"><span class="variable">$ </span>cd privoxy-<span class="number">3.0</span>.<span class="number">26</span>-stable</div></pre></td></tr></table></figure>
<p>privoxy-3.0.26-stable 是目前最新的稳定版，建议在下载前去 <a href="https://www.privoxy.org/sf-download-mirror/Sources/" target="_blank" rel="external">Privoxy 官网下载页</a> 检查一下版本。</p>
<h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>Privoxy 强烈不建议使用 root 用户运行，所以我们使用 <code>useradd privoxy</code> 新建一个用户.</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>autoheader &amp;&amp; autoconf</div><div class="line"><span class="variable">$ </span>./configure</div><div class="line"><span class="variable">$ </span>make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>privoxy<span class="regexp">/config</span></div></pre></td></tr></table></figure>
<p>找到以下两句，确保没有注释掉</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">listen-address <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8118</span> # <span class="number">8118</span> 是默认端口，不用改，下面会用到</div><div class="line">forward-socks5t / <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">0</span> # 这里的端口写 shadowsocks 的本地端口</div></pre></td></tr></table></figure>
<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ privoxy --<span class="keyword">user</span> <span class="title">privoxy</span> /usr/local/etc/privoxy/config</div></pre></td></tr></table></figure>
<h2 id="配置-etc-profile"><a href="#配置-etc-profile" class="headerlink" title="配置 /etc/profile"></a>配置 /etc/profile</h2><p>编辑：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">vi</span> /etc/<span class="keyword">profile</span></div></pre></td></tr></table></figure>
<p>添加下面两句：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> http_proxy=http:<span class="comment">//127.0.0.1:8118       #这里的端口和上面 privoxy 中的保持一致</span></div><div class="line"><span class="keyword">export</span> https_proxy=http:<span class="comment">//127.0.0.1:8118</span></div></pre></td></tr></table></figure>
<p>运行以下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">source</span> <span class="regexp">/etc/</span>profile</div></pre></td></tr></table></figure>
<p>测试生效：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl www<span class="selector-class">.google</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<p>返回一大堆 HTML 则说明 shadowsocks 正常工作了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果不能访问，请重启机器，依次打开 shadowsocks 和 privoxy 再测试.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nohup sslocal -c <span class="meta-keyword">/etc/</span>shadowsocks.json <span class="meta-keyword">/dev/</span>null <span class="number">2</span>&gt;<span class="variable">&amp;1</span> &amp;</div><div class="line">$ privoxy --user privoxy <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/etc/</span>privoxy/config</div></pre></td></tr></table></figure>
<p>如果不需要用代理了，记得把 <code>/etc/profile</code> 里的配置注释掉，不然会一直走代理流量。</p>
<hr>
<ul>
<li><a href="https://www.privoxy.org/" target="_blank" rel="external">Privoxy - Home Page</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Shadowsocks" target="_blank" rel="external">Shadowsocks - Wikis</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      使用国内服务器，无论用 npm 还是 GitHub 都不太顺畅。Npm 可以用 cnpm 代替，GitHub 就没办法了。用了 shadowsocks，这个问题就完美解决了。
    
    </summary>
    
    
      <category term="CentOS" scheme="http://brickyang.github.io/tags/CentOS/"/>
    
      <category term="Shadowsocks" scheme="http://brickyang.github.io/tags/Shadowsocks/"/>
    
  </entry>
  
</feed>
